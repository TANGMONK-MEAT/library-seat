<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.tangmonkmeat.mapper.LeaveMapper">

    <resultMap id="BaseResultMap" type="com.github.tangmonkmeat.entity.Leave">
        <id column="l_id" jdbcType="INTEGER" property="lId" />
        <result column="seat_id" jdbcType="INTEGER" property="seatId" />
        <result column="user_id" jdbcType="INTEGER" property="userId" />
        <result column="leave_time" jdbcType="TIMESTAMP" property="leaveTime" />
        <result column="back_time" jdbcType="TIMESTAMP" property="backTime" />
        <result column="status" jdbcType="TINYINT" property="status" />
    </resultMap>

    <sql id="Base_Column_Where_Selective">
        <if test="seatId != null">
            and seat_id = #{seatId,jdbcType=INTEGER}
        </if>
        <if test="userId != null">
            and user_id = #{userId,jdbcType=INTEGER}
        </if>
        <if test="leaveTime != null">
            and leave_time = #{leaveTime,jdbcType=TIMESTAMP}
        </if>
        <if test="backTime != null">
            and back_time = #{backTime,jdbcType=TIMESTAMP}
        </if>
        <if test="status != null">
            and status = #{status,jdbcType=TINYINT}
        </if>
        <if test="true">
            or 1=0
        </if>
    </sql>

    <sql id="Base_Column_List">
    l_id, seat_id, user_id, leave_time, back_time, status
  </sql>

    <select id="findOfList" parameterType="com.github.tangmonkmeat.entity.Leave" resultMap="BaseResultMap">
        select * from t_leave
        <include refid="Base_Column_Where_Selective"/>
    </select>

    <select id="count" resultType="int" parameterType="com.github.tangmonkmeat.entity.Leave">
        select count(*) from t_leave
        <include refid="Base_Column_Where_Selective"/>
    </select>

    <select id="findOne" parameterType="int" resultMap="BaseResultMap">
        select * from t_leave
        where s_id=#{id}
    </select>

    <select id="findOneSelective" resultMap="BaseResultMap">
        select * from t_leave
        <include refid="Base_Column_Where_Selective"/>
    </select>

    <sql id="Base_Column_if1_Selective">
        <if test="lId != null">
            l_id,
        </if>
        <if test="seatId != null">
            seat_id,
        </if>
        <if test="userId != null">
            user_id,
        </if>
        <if test="leaveTime != null">
            leave_time,
        </if>
        <if test="backTime != null">
            back_time,
        </if>
        <if test="status != null">
            status,
        </if>
    </sql>

    <sql id="Base_Column_if2_Selective">
        <if test="lId != null">
            #{lId,jdbcType=INTEGER},
        </if>
        <if test="seatId != null">
            #{seatId,jdbcType=INTEGER},
        </if>
        <if test="userId != null">
            #{userId,jdbcType=INTEGER},
        </if>
        <if test="leaveTime != null">
            #{leaveTime,jdbcType=TIMESTAMP},
        </if>
        <if test="backTime != null">
            #{backTime,jdbcType=TIMESTAMP},
        </if>
        <if test="status != null">
            #{status,jdbcType=TINYINT},
        </if>
    </sql>

    <insert id="addOneSelective" parameterType="com.github.tangmonkmeat.entity.Leave">
        insert into t_leave
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_if1_Selective"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_if2_Selective"/>
        </trim>
    </insert>

    <update id="updateOneSelective" parameterType="com.github.tangmonkmeat.entity.Leave">
        update t_leave
        <set>
            <if test="seatId != null">
                seat_id = #{seatId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="leaveTime != null">
                leave_time = #{leaveTime,jdbcType=TIMESTAMP},
            </if>
            <if test="backTime != null">
                back_time = #{backTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
        </set>
        where l_id = #{lId,jdbcType=INTEGER}
    </update>

    <delete id="deleteOne" parameterType="int">
        delete from t_leave where s_id=#{id}
    </delete>

</mapper>